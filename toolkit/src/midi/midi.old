/*************************************
  Kern-to-humdrum-MIDI format
  conversion utility.
  Takes Kern file from stdin and
  writes humdrum-MIDI file to stdout.
**************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <dos.h>
#include <bios.h>
#include <mcc.h>
#include "humdrum.h"


static	int	spine_list[16] = { -1, -1, -1, -1, -1, -1, -1, -1,
							   -1, -1, -1, -1, -1, -1, -1, -1 };
static	int kern_list[16] = { -1, -1, -1, -1, -1, -1, -1, -1,
							  -1, -1, -1, -1, -1, -1, -1, -1 };
static	int	delta_list[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
							   0, 0, 0, 0, 0, 0, 0, 0 };
static	int	new_list[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
							 0, 0, 0, 0, 0, 0, 0, 0 };
static	int	duration_list[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
							  0, 0, 0, 0, 0, 0, 0, 0 };
static	int	active_channels;
static	char buffer[960];
static	char data[16][60];
static	MIDI_EVENT	note_list[16];

/***************************************
  getnext : reads in next non-comment
  line
***************************************/

char	*getnext ( int *line )
{
	char	*rc;

	do
	{
		rc = fgets (buffer, 960, stdin);
		*line += 1;
		if (buffer[0] == '!')
			printf("%s", buffer);
	} while (buffer[0] == '!' && rc != NULL );

	return rc;
}

/**************************************
  find_note: returns the MIDI
  note value of a kern note
**************************************/

int	find_note ( char *p )
{
	int	i;
	int	note;
	int	done;
	int	octave;
	int	accidentals;
	char	*token;
	char	temp;

	static	int	note_vals[7] = { 69, 71, 60, 62, 64, 65, 67 };

	token = p;
	note = 0;
	done = FALSE;

	/***************************************
	  First we find the root pitch
	  ignoring all octave indications,
	  accidentals, etc.
	***************************************/

	while ( *p != ' ' && *p != 0 && *p != '\n' && !done )
	{
		temp = tolower (*p);

		if (temp >= 'a' && temp <= 'g')
		{
			if (note == 0)
				note = note_vals[ temp - 'a' ];
		
			done == TRUE;
		}
		p++;
	}	

	/**************************************
	  Now we do octave stuff and
	  accidentals
	**************************************/

	p = token;
	octave = 0;
	accidentals = 0;

	while ( *p != ' ' && *p != 0 && *p != '\n' )
	{
		if ( *p >= 'A' && *p <= 'G' )	
		{
			octave = octave - 1;
		}
		else if ( *p >= 'a' && *p <= 'g' )
		{
			octave = octave + 1;
		}
		else if ( *p == '#' )
		{
			accidentals = accidentals + 1;
		}
		else if ( *p == '-' )
		{
			accidentals = accidentals - 1;
		}
		p++;
	}

	if (octave > 0)
		octave = octave - 1;

	note = note + 12 * octave + accidentals;

	/* Is it a rest or the end of a tie? */

	if ( strchr (token, 'r') )
		note = REST;
	/*
	else if ( strchr (token, ']') || strchr (token, '_') )
		note = TIE;
	*/

	return (note);
}

/****************************************
  find_duration : calculates the
  duration of a given note
****************************************/

int	find_duration	( char *p )
{
	char *token;
	char temp;
	int	duration;
	int	done;

	token = p;
	done = FALSE;
	duration = 0;

	while ( *p != ' ' && *p != '\n' && *p != 0 && !done)
	{
		if ( *p >= '0' && *p <= '9' )
		{
			duration = atoi ( p );
			done = TRUE;
		}
		p ++;
	}

	if ( duration != 0 )
	{
		duration = (4*QUARTER) / duration;

		/*******************************
		  Check if it's a dotted note
		*******************************/

		while ( *p >= '0' && *p <= '9' )
			p++;

		if (*p == '.')
			duration = duration + duration / 2;	
	}

	return (duration);
}

/*************************************
  remove_notes : traverses list of
  queued notes from a given spine,
  frees the memory associated with
  the spine, and prints out a 
  "note off" command.
*************************************/

void	remove_notes ( int spine, int delta )
{
	MIDI_PTR	current;
	MIDI_PTR	old;

	current = note_list[spine].next;

	while (current != NULL)
	{
		if (current->note != REST)
		{
			printf("%d/-%d/64 ", delta, current->note);
		}
		old = current;
		current = current->next;
		free (old);
	}
}

/***************************************
  add_note : queues a note in a list
  for a given spine. This list is used
  by the remove_notes function
  to determine which notes are to
  be turned off.
***************************************/

void	add_note ( int spine, int note )
{
	MIDI_PTR	current;

	current = &(note_list[spine]);

	while (current->next != NULL)
		current = current->next;

	current->next = (MIDI_PTR) malloc (sizeof(MIDI_EVENT));
	current->next->note = note;
	current->next->next = NULL;
}

/*************************************
  read_data : the main loop for the
  conversion utility
**************************************/

void	read_data ()
{
	char *ptr;
	char	kern_token[16];
	int	channel, note, velocity;
	int	last_delta, min_delta, duration;
	int	increase, checked, done, line, tab;
	int	found_note, score_data;
	int	barnumber = 0;
	int	exclusive, freed;
	int	num_matched, tied;
	int	i, j, k;

	/************************************
	  First we read through the file
	  ignoring comments until we come to
	  the first valid line and use it
	  to figure out how many active
	  channels we have to begin with
	************************************/

	getnext ( &line );
	
	do
	{
		last_delta = 0;
		line = 0;
	
		for (i=0; buffer[i] != '\n' ; i++)
		{
			if (buffer[i] == '\t')
				active_channels = active_channels + 1;
		}
	
		active_channels ++;
	
		for (i=0; i< active_channels; i++)
			note_list[i].next = NULL;
	
		/*************************************
		  Our main loop. Here we take one
		  line at a time, break it into
		  spines, and then break each spine
		  up into note information, which
		  we then store in the buffer. Also,
		  if we encounter any add-spine
		  or terminate-spine representations,
		  we act accordingly.
		**************************************/
		  
		do 
		{
			found_note = FALSE;
			score_data = FALSE;

			/**********************************
			  Break line into separate pieces
			  of data, one for each spine.
			**********************************/
	
			exclusive = FALSE;
			j = 0;
			k = 0;
	
			for (i=0; i<active_channels; i++)
			{
				while (buffer[j] != '\t' && buffer[j] != '\n' && buffer[j] != 0)
				{
					data[i][k] = buffer[j];
					j = j + 1;
					k = k + 1;
				}
	
				data[i][k] = '\0';
				data[i][k+1] = '\0';
				k = 0;
				j++;
			}
		
			/**********************************
			  Now that we've broken the line
			  up, we can look at the tokens
			**********************************/
	
			increase = FALSE;
	
			min_delta = 16 * QUARTER;
	
			for (i=0; i<active_channels; i++)
			{
				freed = FALSE;
				
				if (!strncmp(data[i], "*+", 2)  || !strncmp(data[i], "*^", 2))
				{
					increase = 1;
					new_list[i] = 1;
				}
				else 
				if ( !strncmp(data[i], "*-", 2) || !strncmp(data[i], "*v", 2) )
				{
					increase = -1;
					new_list[i] = -1;
				}
				else if (!strncmp(data[i], "**kern", 6))
				{
					kern_list[i] = 1;
					printf("**MIDI");
					exclusive = TRUE;
				}
				else if ( !strncmp(data[i], "**", 2) )
				{
					printf("%s", data[i]);
				}
				else if (data[i][0] == '*')
				{
					/* echo tandem interpretations */
					if (!increase)
						printf("%s", data[i]);
				}
				else if (data[i][0] == '.')
				{
					printf(".");
					duration_list[i] = 0;

					if (delta_list[i] < 0 && kern_list[i] == 1)
					{
						fprintf(stderr, "Delta %d\n", delta_list[i]);
						fprintf(stderr, "Timing error at line %d, spine %d.\n",
								line, i);
						fprintf(stderr, "%s", buffer);
						exit (1);
					}
				}
				else if (data[i][0] == '=')
				{
					/********************************
					  Bar line indicator. First we
					  check if the length of the
					  notes in the bars adds up.
					  If not, print an error and
					  terminate. If so, then echo
					  the bar number for debugging
					  purposes.
					********************************/
	
					for (j=0; j< active_channels-1; j++)
					{
						if (delta_list[j] != delta_list[j+1])
						{
							fprintf(stderr,
								"Timing error at line %d, in bar %d.\n",
								line, barnumber);
							exit(1);
						}
					}
	
					num_matched = sscanf (data[i], "=%d", &barnumber);
					printf("%s", data[i]);
				}
				else
				{
					/**************************************
					  Here, the line has been split into
					  spines, each stored in data[i].
					  Now we process each data[i] in turn
					  and split it into multiple stops.
					**************************************/
	
					done = FALSE;
					checked = FALSE;
					ptr = data[i];
	
					while ( !done )
					{
						note = find_note ( ptr );
						duration = find_duration ( ptr );
						
						duration_list[i] = duration;

						if (note != 0)
						{
							score_data = TRUE;
							if (note != REST)
								found_note = TRUE;
						}

						/***************************************
						  If we just read in a bona-fide note,
						  and we haven't freed all of the queued
						  notes, we free them and mark them as
						  freed
						***************************************/
	
						if ( note != 0 && note != TIE )
						{
							if (!freed)
							{
								remove_notes ( i, last_delta );
								freed = TRUE;
							}
						}
	
						/*******************************************
						  If the delta differential becomes
						  negative for any reason, there must be
						  an error in the input data, so we
						  report it and terminate
						********************************************/
	
						if ( delta_list[i] < 0)
						{
							fprintf(stderr, 
									"Timing error at line %d, spine %d.\n",
									line, i);
							fprintf(stderr, "%s", buffer);
							exit (1);
						}
	
						/*********************************************
						  Finally, after all of the checks and
						  queues and so forth, we can now insert
						  the note into the queue, and print out a
						  note on command as long as it's not a 
						  rest or a tied note
						*********************************************/
	
						if (note != 0)
						{
							add_note ( i, note );
							if (note != REST)
							{
								printf("%d/%d/64 ", last_delta, note );
							}
							else
								printf(".");
						}
						else
						{
							printf(".");
						}
	
						/********************************
						  Move to the next field in the
						  spine if there is one,
						  otherwise, exit from loop.
						*********************************/
	
						while ( *ptr != ' ' && *ptr != 0 && *ptr != '\n' )
							ptr ++;
	
						switch ( *ptr )
						{
							case '\n' :
							case '\0' :
								done = TRUE;
								break;
							case ' ' :
								ptr ++;
								break;
							default:
								break;
						}
					}
				}
	
				if (!increase)
				{
					if ( i < active_channels - 1)
						printf ("\t");
					else if (i != active_channels)
						printf ("\n");	
				}
			}
	
			/******************************************
			  calculate the delta differential based
			  on the last delta time, and the duration
			  of the note in each spine.
			*******************************************/

			/*
			fprintf(stderr, "%d - ", line);
			*/

			for (i=0; i<active_channels; i++)
			{
				if (score_data)
				{
					if (kern_list[i])
						delta_list[i] = delta_list[i]+
										duration_list[i]-last_delta;
				}
				/*
				fprintf(stderr, "%d-%d ", delta_list[i], duration_list[i]);
				*/
			}
			/*
			fprintf(stderr, "\n");
			*/
				
			/***************************************
			  Calculate the smallest time
			  differential from the new line of
			  note information. The smallest one
			  will be the delta-time for the next
			  MIDI event.
			***************************************/
	
			for (i=0; i<active_channels; i++)
			{
				if ( kern_list[i] == 1 && delta_list[i] < min_delta)
					min_delta = delta_list[i];
			}
	
			if (min_delta != 16 * QUARTER && min_delta != 0)
			{
				last_delta = min_delta;
			}
	
			if (increase < 0)
			{
				for (i=0; i< active_channels; i++)
				{
					if (new_list[i] == -1 && kern_list[i] == 1)
					{
						remove_notes ( i, last_delta );
					}
					else
					{
						printf(".");
					}

					if (i< active_channels-1)
						printf("\t");
					else
						printf("\n");
				}
			}
	
			if (increase)
			{
				tab = FALSE;
	
				for ( i=0; i<active_channels; i++)
				{
					if (new_list[i] == 1)
					{
						active_channels = active_channels + 1;
	
						for (j = active_channels-1; j > i; j--)
						{
							kern_list[j] = kern_list[j-1];
							delta_list[j] = delta_list[j-1];
							spine_list[j] = spine_list[j-1];
							new_list[j] = new_list[j-1];
							note_list[j] = note_list[j-1];
							duration_list[j] = duration_list[j-1];
						}
						new_list[i] = 0;
	
						if (tab)
						{
							printf("\t*+");
						}
						else
						{
							printf("*+");
							tab = TRUE;
						}
	
						i++;
					}
					else if (new_list[i] == -1)
					{
						active_channels = active_channels - 1;
	
						for (j = i; j < active_channels+1; j++)
						{
							kern_list[j] = kern_list[j+1];
							delta_list[j] = delta_list[j+1];
							spine_list[j] = spine_list[j+1];
							new_list[j] = new_list[j+1];
							note_list[j] = note_list[j+1];
							duration_list[j] = duration_list[j+1];
						}
	
						if ( tab )
						{
							printf("\t*-");
						}
						else
						{
							printf("*-");
							tab = TRUE;
						}
						i--;
					}
					else
					{
						if (tab)
						{
							printf("\t*");
						}
						else
						{
							printf("*");
							tab = TRUE;
						}	
					}
					new_list[i] = 0;
				}	
				printf("\n");
			}
	
			/********************************************
			  I admit it, this is a hack. If we just
			  read in a **kern exclusive interpretation,
			  we assign all of the spines to MIDI
			  channel 1. It's temporary.
			********************************************/
	
			if (exclusive)
			{
				for (i=0; i< active_channels; i++)
				{
					if ( kern_list[i] != -1 )
						printf ("*Ch1");
					else
						printf("*");
	
					if (i < active_channels-1)
						printf("\t");
				}
				printf("\n");
			}
		} while ( active_channels > 0 && getnext ( &line ) );
	} while ( getnext (&line ) );
}

/***************************************
  Program mainline.
***************************************/

void	main 	(int argc, char *argv[])
{
	read_data ();
}
